[{"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\index.js":"1","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\App.js":"2","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\utils\\GlobalContext.js":"3","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\pages\\AddTodo.jsx":"4","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\pages\\ViewTodos.jsx":"5","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\pages\\Homepage.jsx":"6","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\components\\Navbar\\index.js":"7","C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\components\\Navbar\\Navbar.jsx":"8","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\index.js":"9","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\serviceWorker.js":"10","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\App.jsx":"11","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\pages\\Index\\Index.jsx":"12","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\pages\\Meeting\\Meeting.jsx":"13","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\agora.config.js":"14","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\utils\\Validator.js":"15","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\utils\\Settings.js":"16","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\components\\AgoraVideoCall\\index.jsx":"17"},{"size":219,"mtime":1607655894000,"results":"18","hashOfConfig":"19"},{"size":743,"mtime":1607658988000,"results":"20","hashOfConfig":"19"},{"size":772,"mtime":1607659618000,"results":"21","hashOfConfig":"19"},{"size":1091,"mtime":1607659934000,"results":"22","hashOfConfig":"19"},{"size":961,"mtime":1607659708000,"results":"23","hashOfConfig":"19"},{"size":169,"mtime":1607656734000,"results":"24","hashOfConfig":"19"},{"size":35,"mtime":1607657352000,"results":"25","hashOfConfig":"19"},{"size":724,"mtime":1607657234000,"results":"26","hashOfConfig":"19"},{"size":767,"mtime":1608087344326,"results":"27","hashOfConfig":"28"},{"size":4951,"mtime":1608087168547,"results":"29","hashOfConfig":"28"},{"size":517,"mtime":1608089097772,"results":"30","hashOfConfig":"28"},{"size":11153,"mtime":1608089170466,"results":"31","hashOfConfig":"28"},{"size":1919,"mtime":1608089181493,"results":"32","hashOfConfig":"28"},{"size":86,"mtime":1608089539524,"results":"33","hashOfConfig":"28"},{"size":327,"mtime":1608087168560,"results":"34","hashOfConfig":"28"},{"size":1396,"mtime":1608087168554,"results":"35","hashOfConfig":"28"},{"size":11990,"mtime":1608087168497,"results":"36","hashOfConfig":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"74y7yj",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},"1a8d5q",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\index.js",[],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\App.js",[],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\utils\\GlobalContext.js",[],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\pages\\AddTodo.jsx",[],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\pages\\ViewTodos.jsx",["76"],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\pages\\Homepage.jsx",[],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\components\\Navbar\\index.js",[],"C:\\Users\\imnik\\OneDrive\\Desktop\\MERN-class-demo\\client\\src\\components\\Navbar\\Navbar.jsx",[],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\index.js",["77"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst polyfill = (() => {\n  // Object.entries\n  if (!Object.entries)\n  Object.entries = function( obj ){\n    var ownProps = Object.keys( obj ),\n        i = ownProps.length,\n        resArray = new Array(i); // preallocate the Array\n    while (i--)\n      resArray[i] = [ownProps[i], obj[ownProps[i]]];\n    \n    return resArray;\n  }\n})();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["78","79"],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\serviceWorker.js",[],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\App.jsx",[],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\pages\\Index\\Index.jsx",["80","81","82"],"import React from 'react'\nimport * as Cookies from 'js-cookie'\n\nimport '../../assets/fonts/css/icons.css'\nimport Validator from '../../utils/Validator'\nimport { RESOLUTION_ARR } from '../../utils/Settings'\nimport './Index.css'\n\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      joinBtn: false,\n      channel: '',\n      baseMode: 'avc',\n      transcode: 'interop',\n      attendeeMode: 'video',\n      videoProfile: '480p_4',\n\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('keypress', (e) => {\n      e.keyCode === 13 && this.handleJoin()\n    })\n  }\n\n  /**\n   * \n   * @param {String} val 0-9 a-z A-Z _ only \n   * @param {Boolean} state \n   */\n  handleChannel = (val, state) => {\n    this.setState({\n      channel: val,\n      joinBtn: state\n    })\n  }\n\n  handleJoin = () => {\n    if (!this.state.joinBtn) {\n      return\n    }\n    console.log(this.state)\n    Cookies.set('channel', this.state.channel)\n    Cookies.set('baseMode', this.state.baseMode)\n    Cookies.set('transcode', this.state.transcode)\n    Cookies.set('attendeeMode', this.state.attendeeMode)\n    Cookies.set('videoProfile', this.state.videoProfile)\n    window.location.hash = \"meeting\"\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper index\">\n        <div className=\"ag-header\"></div>\n        <div className=\"ag-main\">\n          <section className=\"login-wrapper\">\n            <div className=\"login-header\">\n              <img src={require('../../assets/images/ag-logo.png')} alt=\"\" />\n              <p className=\"login-title\">AgoraWeb v2.1</p>\n              <p className=\"login-subtitle\">Powering Real-Time Communications</p>\n            </div>\n            <div className=\"login-body\">\n              <div className=\"columns\">\n                <div className=\"column is-12\">\n                  <InputChannel onChange={this.handleChannel} placeholder=\"Input a room name here\"></InputChannel>\n                </div>\n              </div>\n              <div className=\"columns\">\n                <div className=\"column is-7\">\n                  <BaseOptions\n                    onChange={val => this.setState({ baseMode: val })}>\n                  </BaseOptions>\n                </div>\n                <div className=\"column is-5\">\n                  <AdvancedOptions\n                    onRadioChange={val => this.setState({ transcode: val })}\n                    onSelectChange={val => this.setState({ videoProfile: val })}>\n                  </AdvancedOptions>\n                </div>\n              </div>\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <div id=\"attendeeMode\" className=\"control\">\n                    <label className=\"radio\">\n                      <input onChange={e => this.setState({ attendeeMode: e.target.value })}\n                        value=\"video\" type=\"radio\"\n                        name=\"attendee\" defaultChecked />\n                      <span className=\"radio-btn\">\n                      </span>\n                      <span className=\"radio-img video\">\n                      </span>\n                      <span className=\"radio-msg\">Video Call : join with video call</span>\n                    </label>\n                    <br />\n                    <label className=\"radio\">\n                      <input onChange={e => this.setState({ attendeeMode: e.target.value })}\n                        value=\"audio-only\" type=\"radio\"\n                        name=\"attendee\" />\n                      <span className=\"radio-btn\">\n                      </span>\n                      <span className=\"radio-img audio\">\n                      </span>\n                      <span className=\"radio-msg\">Audio-only : join with audio call</span>\n                    </label>\n                    <br />\n                    <label className=\"radio\">\n                      <input onChange={e => this.setState({ attendeeMode: e.target.value })}\n                        value=\"audience\" type=\"radio\"\n                        name=\"attendee\" />\n                      <span className=\"radio-btn\">\n                      </span>\n                      <span className=\"radio-img audience\">\n                      </span>\n                      <span className=\"radio-msg\">Audience : join as an audience</span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"login-footer\">\n              <a id=\"joinBtn\"\n                onClick={this.handleJoin}\n                disabled={!this.state.joinBtn}\n                className=\"ag-rounded button is-info\">Join\n                  </a>\n            </div>\n          </section>\n        </div>\n        <div className=\"ag-footer\">\n          <a className=\"ag-href\" href=\"https://www.agora.io\">\n            <span>Powered By Agora</span>\n          </a>\n          <div>\n            <span>Interested in Agora video call SDK? Contact </span>\n            <span className=\"ag-contact\">sales@agora.io</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass InputChannel extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      errorMsg: '',\n      state: ''\n    }\n  }\n\n  validate = (val) => {\n    this.setState({\n      state: '',\n      errorMsg: ''\n    })\n    if (Validator.isNonEmpty(val.trim())) {\n      this.setState({\n        errorMsg: 'Cannot be empty!',\n        state: 'is-danger'\n      })\n      return false\n    }\n    else if (Validator.minLength(val.trim(), 1)) {\n      this.setState({\n        errorMsg: 'No shorter than 1!',\n        state: 'is-danger'\n      })\n      return false\n    }\n    else if (Validator.maxLength(val.trim(), 16)) {\n      this.setState({\n        errorMsg: 'No longer than 16!',\n        state: 'is-danger'\n      })\n      return false\n    }\n    else if (Validator.validChar(val.trim())) {\n      this.setState({\n        state: 'is-danger',\n        errorMsg: 'Only capital or lower-case letter, number and \"_\" are permitted!'\n      })\n      return false\n    }\n    else {\n      this.setState({\n        state: 'is-success'\n      })\n      return true\n    }\n  }\n\n  handleChange = (e) => {\n    let state = this.validate(e.target.value)\n    this.props.onChange(e.target.value, state)\n  }\n\n  render() {\n    let validateIcon = ''\n    switch (this.state.state) {\n      default:\n      case '':\n        validateIcon = ''; break;\n      case 'is-success':\n        validateIcon = (<i className=\"ag-icon ag-icon-valid\"></i>); break;\n      case 'is-danger':\n        validateIcon = (<i className=\"ag-icon ag-icon-invalid\"></i>); break;\n    }\n\n    return (\n      <div className=\"channel-wrapper control has-icons-left\">\n        <input onInput={this.handleChange}\n          id=\"channel\"\n          className={'ag-rounded input ' + this.state.state}\n          type=\"text\"\n          placeholder={this.props.placeholder} />\n        <span className=\"icon is-small is-left\">\n          <img src={require('../../assets/images/ag-login.png')} alt=\"\" />\n        </span>\n        <span className=\"validate-icon\">\n          {validateIcon}\n        </span>\n        <div className=\"validate-msg\">\n          {this.state.errorMsg}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass BaseOptions extends React.Component {\n  constructor(props) {\n    super(props)\n    this._options = [\n      {\n        label: 'Agora Video Call',\n        value: 'avc',\n        content: 'One to one and group calls'\n      },\n      {\n        label: 'Agora Live',\n        value: 'al',\n        content: 'Enabling real-time interactions between the host and the audience'\n      }\n    ]\n    this.state = {\n      active: false,\n      message: 'Agora Video Call',\n\n    }\n  }\n\n  handleSelect = (item) => {\n    let msg = item.label\n    let val = item.value\n    this.setState({\n      'message': msg,\n      'active': false\n    })\n    this.props.onChange(val)\n  }\n\n  render() {\n    const options = this._options.map((item, index) => {\n      return (\n        <div className=\"dropdown-item\"\n          key={index}\n          onClick={(e) => this.handleSelect(item, e)}>\n          <p>{item.label}</p>\n          <hr />\n          <p>{item.content}</p>\n        </div>\n      )\n    })\n\n    return (\n      <div className={this.state.active ? 'dropdown is-active' : 'dropdown'}>\n        <div className=\"dropdown-trigger\"\n          onClick={() => this.setState({ 'active': !this.state.active })}>\n          <a id=\"baseMode\" className=\"ag-rounded button\" aria-haspopup=\"true\" aria-controls=\"baseModeOptions\">\n            <span id=\"baseOptionLabel\">{this.state.message}</span>\n            <span className=\"icon is-small\">\n              <i className=\"ag-icon ag-icon-arrow-down\" aria-hidden=\"true\"></i>\n            </span>\n          </a>\n        </div>\n        <div className=\"dropdown-menu\" id=\"baseModeOptions\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {options}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AdvancedOptions extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      active: false,\n    }\n  }\n\n  handleRadio = (e) => {\n    this.props.onRadioChange(e.target.value)\n  }\n\n  handleSelect = (e) => {\n    this.props.onSelectChange(e.target.value)\n  }\n\n  render() {\n    const options = Object.entries(RESOLUTION_ARR).map((item, index) => {\n      return (\n        <option key={index} value={item[0].split(\",\")[0]}>{item[1][0]}x {item[1][1]}, {item[1][2]}fps, {item[1][3]}kbps</option>\n      )\n    })\n    return (\n      <div className={this.state.active ? 'dropdown is-active' : 'dropdown'}>\n        <div className=\"dropdown-trigger\"\n          onClick={() => this.setState({ 'active': !this.state.active })}>\n          <a id=\"advancedProfile\" className=\"ag-rounded button\" aria-haspopup=\"true\" aria-controls=\"advancedOptions\">\n            <span>Advanced</span>\n          </a>\n        </div>\n        <div className=\"dropdown-menu\" id=\"advancedOptions\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            <div className=\"dropdown-item\">\n              <div className=\"control\">\n                <label className=\"radio\">\n                  <input value=\"\" type=\"radio\" name=\"transcode\" onChange={this.handleRadio} />\n                  <span>VP8-only</span>\n                </label>\n                <label className=\"radio\">\n                  <input value=\"interop\" type=\"radio\" defaultChecked onChange={this.handleRadio} name=\"transcode\" />\n                  <span>VP8 &amp; H264</span>\n                </label>\n                <label className=\"radio\">\n                  <input value=\"h264_interop\" type=\"radio\" onChange={this.handleRadio} name=\"transcode\" />\n                  <span>H264-only</span>\n                </label>\n              </div>\n            </div>\n            <div className=\"dropdown-item\">\n              <div className=\"select is-rounded\">\n                <select onChange={this.handleSelect} defaultValue=\"480p_4\" id=\"videoProfile\" className=\"ag-rounded is-clipped\">\n                  {options}\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Index","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\pages\\Meeting\\Meeting.jsx",[],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\agora.config.js",[],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\utils\\Validator.js",["83","84"],"export default {\n  minLength(value, length) {\n    return value.length < length ?\n      1 : 0\n  },\n  maxLength(value, length) {\n    return value.length > length ?\n      1 : 0\n  },\n  validChar(value) {\n    return !/^[0-9a-zA-Z\\_]+$/.test(value) ?\n      1 : 0\n  },\n  isNonEmpty(value) {\n    return value === '' ?\n      1 : 0\n  }\n}","C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\utils\\Settings.js",[],"C:\\Users\\imnik\\Code\\projects\\GetPetVet\\client\\src\\components\\AgoraVideoCall\\index.jsx",["85","86","87","88"],"import React from 'react'\nimport { merge } from 'lodash'\nimport AgoraRTC from 'agora-rtc-sdk'\n\nimport './canvas.css'\nimport '../../assets/fonts/css/icons.css'\n\nconst tile_canvas = {\n  '1': ['span 12/span 24'],\n  '2': ['span 12/span 12/13/25', 'span 12/span 12/13/13'],\n  '3': ['span 6/span 12', 'span 6/span 12', 'span 6/span 12/7/19'],\n  '4': ['span 6/span 12', 'span 6/span 12', 'span 6/span 12', 'span 6/span 12/7/13'],\n  '5': ['span 3/span 4/13/9', 'span 3/span 4/13/13', 'span 3/span 4/13/17', 'span 3/span 4/13/21', 'span 9/span 16/10/21'],\n  '6': ['span 3/span 4/13/7', 'span 3/span 4/13/11', 'span 3/span 4/13/15', 'span 3/span 4/13/19', 'span 3/span 4/13/23', 'span 9/span 16/10/21'],\n  '7': ['span 3/span 4/13/5', 'span 3/span 4/13/9', 'span 3/span 4/13/13', 'span 3/span 4/13/17', 'span 3/span 4/13/21', 'span 3/span 4/13/25', 'span 9/span 16/10/21'],\n}\n\n\n/**\n * @prop appId uid\n * @prop transcode attendeeMode videoProfile channel baseMode\n */\nclass AgoraCanvas extends React.Component {\n  constructor(props) {\n    super(props)\n    this.client = {}\n    this.localStream = {}\n    this.shareClient = {}\n    this.shareStream = {}\n    this.state = {\n      displayMode: 'pip',\n      streamList: [],\n      readyState: false\n    }\n  }\n\n  componentWillMount() {\n    let $ = this.props\n    // init AgoraRTC local client\n    this.client = AgoraRTC.createClient({ mode: $.transcode })\n    this.client.init($.appId, () => {\n      console.log(\"AgoraRTC client initialized\")\n      this.subscribeStreamEvents()\n      this.client.join($.appId, $.channel, $.uid, (uid) => {\n        console.log(\"User \" + uid + \" join channel successfully\")\n        console.log('At ' + new Date().toLocaleTimeString())\n        // create local stream\n        // It is not recommended to setState in function addStream\n        this.localStream = this.streamInit(uid, $.attendeeMode, $.videoProfile)\n        this.localStream.init(() => {\n          if ($.attendeeMode !== 'audience') {\n            this.addStream(this.localStream, true)\n            this.client.publish(this.localStream, err => {\n              console.log(\"Publish local stream error: \" + err);\n            })\n          }\n          this.setState({ readyState: true })\n        },\n          err => {\n            console.log(\"getUserMedia failed\", err)\n            this.setState({ readyState: true })\n          })\n      })\n    })\n  }\n\n  componentDidMount() {\n    // add listener to control btn group\n    let canvas = document.querySelector('#ag-canvas')\n    let btnGroup = document.querySelector('.ag-btn-group')\n    canvas.addEventListener('mousemove', () => {\n      if (global._toolbarToggle) {\n        clearTimeout(global._toolbarToggle)\n      }\n      btnGroup.classList.add('active')\n      global._toolbarToggle = setTimeout(function () {\n        btnGroup.classList.remove('active')\n      }, 2000)\n    })\n  }\n\n  // componentWillUnmount () {\n  //     // remove listener\n  //     let canvas = document.querySelector('#ag-canvas')\n  //     canvas.removeEventListener('mousemove')\n  // }\n\n  componentDidUpdate() {\n    // rerendering\n    let canvas = document.querySelector('#ag-canvas')\n    // pip mode (can only use when less than 4 people in channel)\n    if (this.state.displayMode === 'pip') {\n      let no = this.state.streamList.length\n      if (no > 4) {\n        this.setState({ displayMode: 'tile' })\n        return\n      }\n      this.state.streamList.map((item, index) => {\n        let id = item.getId()\n        let dom = document.querySelector('#ag-item-' + id)\n        if (!dom) {\n          dom = document.createElement('section')\n          dom.setAttribute('id', 'ag-item-' + id)\n          dom.setAttribute('class', 'ag-item')\n          canvas.appendChild(dom)\n          item.play('ag-item-' + id)\n        }\n        if (index === no - 1) {\n          dom.setAttribute('style', `grid-area: span 12/span 24/13/25`)\n        }\n        else {\n          dom.setAttribute('style', `grid-area: span 3/span 4/${4 + 3 * index}/25;\n                    z-index:1;width:calc(100% - 20px);height:calc(100% - 20px)`)\n        }\n\n        item.player.resize && item.player.resize()\n\n\n      })\n    }\n    // tile mode\n    else if (this.state.displayMode === 'tile') {\n      let no = this.state.streamList.length\n      this.state.streamList.map((item, index) => {\n        let id = item.getId()\n        let dom = document.querySelector('#ag-item-' + id)\n        if (!dom) {\n          dom = document.createElement('section')\n          dom.setAttribute('id', 'ag-item-' + id)\n          dom.setAttribute('class', 'ag-item')\n          canvas.appendChild(dom)\n          item.play('ag-item-' + id)\n        }\n        dom.setAttribute('style', `grid-area: ${tile_canvas[no][index]}`)\n        item.player.resize && item.player.resize()\n\n\n      })\n    }\n    // screen share mode (tbd)\n    else if (this.state.displayMode === 'share') {\n\n    }\n  }\n\n  componentWillUnmount () {\n    this.client && this.client.unpublish(this.localStream)\n    this.localStream && this.localStream.close()\n    this.client && this.client.leave(() => {\n      console.log('Client succeed to leave.')\n    }, () => {\n      console.log('Client failed to leave.')\n    })\n  }\n\n  streamInit = (uid, attendeeMode, videoProfile, config) => {\n    let defaultConfig = {\n      streamID: uid,\n      audio: true,\n      video: true,\n      screen: false\n    }\n\n    switch (attendeeMode) {\n      case 'audio-only':\n        defaultConfig.video = false\n        break;\n      case 'audience':\n        defaultConfig.video = false\n        defaultConfig.audio = false\n        break;\n      default:\n      case 'video':\n        break;\n    }\n\n    let stream = AgoraRTC.createStream(merge(defaultConfig, config))\n    stream.setVideoProfile(videoProfile)\n    return stream\n  }\n\n  subscribeStreamEvents = () => {\n    let rt = this\n    rt.client.on('stream-added', function (evt) {\n      let stream = evt.stream\n      console.log(\"New stream added: \" + stream.getId())\n      console.log('At ' + new Date().toLocaleTimeString())\n      console.log(\"Subscribe \", stream)\n      rt.client.subscribe(stream, function (err) {\n        console.log(\"Subscribe stream failed\", err)\n      })\n    })\n\n    rt.client.on('peer-leave', function (evt) {\n      console.log(\"Peer has left: \" + evt.uid)\n      console.log(new Date().toLocaleTimeString())\n      console.log(evt)\n      rt.removeStream(evt.uid)\n    })\n\n    rt.client.on('stream-subscribed', function (evt) {\n      let stream = evt.stream\n      console.log(\"Got stream-subscribed event\")\n      console.log(new Date().toLocaleTimeString())\n      console.log(\"Subscribe remote stream successfully: \" + stream.getId())\n      console.log(evt)\n      rt.addStream(stream)\n    })\n\n    rt.client.on(\"stream-removed\", function (evt) {\n      let stream = evt.stream\n      console.log(\"Stream removed: \" + stream.getId())\n      console.log(new Date().toLocaleTimeString())\n      console.log(evt)\n      rt.removeStream(stream.getId())\n    })\n  }\n\n  removeStream = (uid) => {\n    this.state.streamList.map((item, index) => {\n      if (item.getId() === uid) {\n        item.close()\n        let element = document.querySelector('#ag-item-' + uid)\n        if (element) {\n          element.parentNode.removeChild(element)\n        }\n        let tempList = [...this.state.streamList]\n        tempList.splice(index, 1)\n        this.setState({\n          streamList: tempList\n        })\n      }\n\n    })\n  }\n\n  addStream = (stream, push = false) => {\n    let repeatition = this.state.streamList.some(item => {\n      return item.getId() === stream.getId()\n    })\n    if (repeatition) {\n      return\n    }\n    if (push) {\n      this.setState({\n        streamList: this.state.streamList.concat([stream])\n      })\n    }\n    else {\n      this.setState({\n        streamList: [stream].concat(this.state.streamList)\n      })\n    }\n\n  }\n\n  handleCamera = (e) => {\n    e.currentTarget.classList.toggle('off')\n    this.localStream.isVideoOn() ?\n      this.localStream.disableVideo() : this.localStream.enableVideo()\n  }\n\n  handleMic = (e) => {\n    e.currentTarget.classList.toggle('off')\n    this.localStream.isAudioOn() ?\n      this.localStream.disableAudio() : this.localStream.enableAudio()\n  }\n\n  switchDisplay = (e) => {\n    if (e.currentTarget.classList.contains('disabled') || this.state.streamList.length <= 1) {\n      return\n    }\n    if (this.state.displayMode === 'pip') {\n      this.setState({ displayMode: 'tile' })\n    }\n    else if (this.state.displayMode === 'tile') {\n      this.setState({ displayMode: 'pip' })\n    }\n    else if (this.state.displayMode === 'share') {\n      // do nothing or alert, tbd\n    }\n    else {\n      console.error('Display Mode can only be tile/pip/share')\n    }\n  }\n\n  hideRemote = (e) => {\n    if (e.currentTarget.classList.contains('disabled') || this.state.streamList.length <= 1) {\n      return\n    }\n    let list\n    let id = this.state.streamList[this.state.streamList.length - 1].getId()\n    list = Array.from(document.querySelectorAll(`.ag-item:not(#ag-item-${id})`))\n    list.map(item => {\n      if (item.style.display !== 'none') {\n        item.style.display = 'none'\n      }\n      else {\n        item.style.display = 'block'\n      }\n    })\n\n  }\n\n  handleExit = (e) => {\n    if (e.currentTarget.classList.contains('disabled')) {\n      return\n    }\n    try {\n      this.client && this.client.unpublish(this.localStream)\n      this.localStream && this.localStream.close()\n      this.client && this.client.leave(() => {\n        console.log('Client succeed to leave.')\n      }, () => {\n        console.log('Client failed to leave.')\n      })\n    }\n    finally {\n      this.setState({ readyState: false })\n      this.client = null\n      this.localStream = null\n      // redirect to index\n      window.location.hash = ''\n    }\n  }\n\n  render() {\n    const style = {\n      display: 'grid',\n      gridGap: '10px',\n      alignItems: 'center',\n      justifyItems: 'center',\n      gridTemplateRows: 'repeat(12, auto)',\n      gridTemplateColumns: 'repeat(24, auto)'\n    }\n    const videoControlBtn = this.props.attendeeMode === 'video' ?\n      (<span\n        onClick={this.handleCamera}\n        className=\"ag-btn videoControlBtn\"\n        title=\"Enable/Disable Video\">\n        <i className=\"ag-icon ag-icon-camera\"></i>\n        <i className=\"ag-icon ag-icon-camera-off\"></i>\n      </span>) : ''\n\n    const audioControlBtn = this.props.attendeeMode !== 'audience' ?\n      (<span\n        onClick={this.handleMic}\n        className=\"ag-btn audioControlBtn\"\n        title=\"Enable/Disable Audio\">\n        <i className=\"ag-icon ag-icon-mic\"></i>\n        <i className=\"ag-icon ag-icon-mic-off\"></i>\n      </span>) : ''\n\n    const switchDisplayBtn = (\n      <span\n        onClick={this.switchDisplay}\n        className={this.state.streamList.length > 4 ? \"ag-btn displayModeBtn disabled\" : \"ag-btn displayModeBtn\"}\n        title=\"Switch Display Mode\">\n        <i className=\"ag-icon ag-icon-switch-display\"></i>\n      </span>\n    )\n    const hideRemoteBtn = (\n      <span\n        className={this.state.streamList.length > 4 || this.state.displayMode !== 'pip' ? \"ag-btn disableRemoteBtn disabled\" : \"ag-btn disableRemoteBtn\"}\n        onClick={this.hideRemote}\n        title=\"Hide Remote Stream\">\n        <i className=\"ag-icon ag-icon-remove-pip\"></i>\n      </span>\n    )\n    const exitBtn = (\n      <span\n        onClick={this.handleExit}\n        className={this.state.readyState ? 'ag-btn exitBtn' : 'ag-btn exitBtn disabled'}\n        title=\"Exit\">\n        <i className=\"ag-icon ag-icon-leave\"></i>\n      </span>\n    )\n\n    return (\n      <div id=\"ag-canvas\" style={style}>\n        <div className=\"ag-btn-group\">\n          {exitBtn}\n          {videoControlBtn}\n          {audioControlBtn}\n          {/* <span className=\"ag-btn shareScreenBtn\" title=\"Share Screen\">\n                        <i className=\"ag-icon ag-icon-screen-share\"></i>\n                    </span> */}\n          {switchDisplayBtn}\n          {hideRemoteBtn}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AgoraCanvas",{"ruleId":"89","severity":1,"message":"90","line":23,"column":6,"nodeType":"91","endLine":23,"endColumn":8,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":6,"column":7,"nodeType":"95","messageId":"96","endLine":6,"endColumn":15},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":125,"column":15,"nodeType":"103","endLine":128,"endColumn":55},{"ruleId":"101","severity":1,"message":"102","line":284,"column":11,"nodeType":"103","endLine":284,"endColumn":111},{"ruleId":"101","severity":1,"message":"102","line":327,"column":11,"nodeType":"103","endLine":327,"endColumn":118},{"ruleId":"104","severity":1,"message":"105","line":1,"column":1,"nodeType":"106","endLine":18,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":11,"column":25,"nodeType":"109","messageId":"110","endLine":11,"endColumn":26,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":98,"column":47,"nodeType":"114","messageId":"115","endLine":98,"endColumn":49},{"ruleId":"112","severity":1,"message":"113","line":124,"column":47,"nodeType":"114","messageId":"115","endLine":124,"endColumn":49},{"ruleId":"112","severity":1,"message":"113","line":220,"column":45,"nodeType":"114","messageId":"115","endLine":220,"endColumn":47},{"ruleId":"112","severity":1,"message":"113","line":294,"column":19,"nodeType":"114","messageId":"115","endLine":294,"endColumn":21},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["116"],"no-unused-vars","'polyfill' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-escape","Unnecessary escape character: \\_.","Literal","unnecessaryEscape",["119","120"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"121","fix":"122"},"no-global-assign","no-unsafe-negation",{"messageId":"123","fix":"124","desc":"125"},{"messageId":"126","fix":"127","desc":"128"},"Update the dependencies array to be: [dispatch]",{"range":"129","text":"130"},"removeEscape",{"range":"131","text":"132"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"133","text":"134"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[568,570],"[dispatch]",[224,225],"",[224,224],"\\"]